name: "CI"
on:
  pull_request:

jobs:
  check:
    name: "Cargo check"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: "actions-rs/toolchain@v1"
        with:
          profile: "minimal"
          toolchain: "stable"
          override: true
      - uses: "actions-rs/cargo@v1"
        with:
          command: "check"

  test:
    name: "Cargo test"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: "actions-rs/toolchain@v1"
        with:
          profile: "minimal"
          toolchain: "stable"
          override: true
      - uses: "actions-rs/cargo@v1"
        with:
          command: "test"

  fmt:
    name: "Cargo format"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: "actions-rs/toolchain@v1"
        with:
          profile: "minimal"
          toolchain: "stable"
          override: true
      - run: "rustup component add rustfmt"
      - uses: "actions-rs/cargo@v1"
        with:
          command: "fmt"
          args: "--all -- --check"

  clippy:
    name: "Cargo clippy"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: "actions-rs/toolchain@v1"
        with:
          profile: "minimal"
          toolchain: "stable"
          override: true
      - run: "rustup component add clippy"
      - uses: "actions-rs/cargo@v1"
        with:
          command: "clippy"
          args: "-- -D warnings"
  
  cross-compile:
    name: ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        include:
          #- target: "x86_64-unknown-linux-gnu"
          #  os: "ubuntu-latest"
          #  bin: "offchain-resolver-gateway"
          #  cross: false
          #  cargo_command: cargo
          - target: "x86_64-unknown-linux-musl"
            os: "ubuntu-latest"
            bin: "offchain-resolver-gateway"
            cross: true
            cargo_command: cargo
          #- target: x86_64-apple-darwin
          #  os: macOS-11
          #  macosx_deployment_target: 10.13
          #  developer_dir: /Applications/Xcode_11.7.app
          #  sdkroot: /Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
          #- target: aarch64-apple-darwin
          #  os: macOS-11
          #  macosx_deployment_target: 11.0
          #  developer_dir: /Applications/Xcode_13.2.1.app
          #  sdkroot: /Applications/Xcode_13.2.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install cross
        uses: taiki-e/install-action@cross

    # - name: Enable cross-compilation
    #    if: matrix.cross
    #    shell: bash
    #    run: |
    #      echo "CARGO=cross" >> $GITHUB_ENV

      - name: Build
        run: cross build --release --bin offchain-resolver-gateway --locked --target ${{ matrix.target }}

